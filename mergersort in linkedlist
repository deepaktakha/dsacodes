/********************************************************************

    Following is the representation of the Singly Linked List Node:

    class node{
        public:
            int data;
            node * next;
            node(int data){
                this->data=data;
                this->next=NULL;
            }
    };
    
********************************************************************/
 node* getmid(node* head){
     node* slow = head;
     node* fast = head->next;
      while(fast!=NULL && fast->next!= NULL){
          slow = slow->next;
          fast = fast->next->next;
      }
      return slow;
 }

 node* merge(node* left,node* right){
     if(left == NULL){
         return right;
     }
     if(right == NULL){
         return left;
     }
     node* ans = new node(-1);
     node* temp = ans;

     //merge two linked list
     while(right!=NULL && left!=NULL){
       if(left->data < right->data){
           temp->next = left;
           temp = left;
           left = left->next;
       }else{
           temp->next = right;
           temp = right;
           right = right->next;
       }
     }
     if(left!= NULL){
       temp->next = left;
        temp = left;
        left = left->next;
     }
     if(right!=NULL){
       temp->next = right;
       temp = right;
       right = right->next;  
     }
     ans = ans->next;
     return ans;
 }
node* mergeSort(node *head) {
    // Write your code here.
    //base case for recursion
    if( head->next==NULL){
        return head;
    }
    node* mid = getmid(head);
    node* left = head;
    node* right = mid->next;
    mid->next = NULL;

    left = mergeSort(left);
    right = mergeSort(right);

    Node* result = merge(left,right);
    return result;
    
}
